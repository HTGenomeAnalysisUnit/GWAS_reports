---
title: "Report: `r params$project`"
output:
  rmdformats::robobook:
    self_contained: true
    thumbnails: false
    lightbox: true
    gallery: false
    highlight: tango
params:
  project: test-gwas
  date: 2021-08-09
  version: v0.2
  regenie_merged: Q1.regenie.gz
  regenie_filename: Q1.regenie.gz
  phenotype: Q1
  covariates: SEX
  phenotype_file: phenos_quant.pheno.validated.txt
  regenie_step1_log: test-ukbb-quant.step1.log
  regenie_step2_log: test-ukbb-quant.step2.log
  phenotype_log: phenos_quant.pheno.validated.log
  covariate_log: covars.cov.validated.log
  plot_ylimit: 0
  manhattan_annotation_enabled: TRUE
  annotation_min_log10p: 6
  annotated_tophits_filename: Q1.regenie.filtered.annotated.txt.gz
  annotated_toploci_filename: Q1.toploci.annot.tsv
---

```{r setup, include=FALSE}
library(DT)
library(data.table)
library(R.utils)
library(ggplot2)
library(skimr)
library(dplyr)
#library(ggfastman)
options(DT.options = list(dom = 't'))
```

## Project Summary

| Parameter     | Value                                      |
| ------------- |--------------------------------------------|
| Project       | `r params$project`                         |
| Pipeline Version       | `r params$version`                |
| Date       | `r params$date`                         |
| Phenotype File      | `r params$phenotype_file`            |
| Phenotype       | `r params$phenotype`                     |
| Covariates       | `r params$covariates`                     |
| Regenie Output      | `r params$regenie_filename`             |

## Phenotype Statistics

### Overview

```{r, echo=FALSE}
phenotypeTable <- read.table(params$phenotype_file, header=TRUE, sep="\t", dec = ".")
dt <- as.data.frame(skim(phenotypeTable) %>%
  dplyr::filter(skim_variable == params$phenotype))
dt <- as.data.frame(as.matrix(dt), stringsAsFactors = F)
datatable(dt)
```

### Phenotype distribution

```{r, echo=FALSE}
if (length(unique(na.omit(phenotypeTable[[params$phenotype]]))) == 2) {
  ggplot(phenotypeTable, aes_string(x=params$phenotype)) +
    geom_bar(color="black", fill="white",bins=30) + theme_bw()
} else {
  ggplot(phenotypeTable, aes_string(x=params$phenotype)) +
    geom_histogram(color="black", fill="white",bins=30) + theme_bw()
}
```

## Main results

Main results are summarised here by Manhattan and QQ plot. Top SNPs (SNPs with LOG10P above `r params$annotation_min_log10p`) are annotated as follows:

1. the SNP with the highest LOG10P value is selected for each gene
2. the resulting SNPs are further grouped by 500kb windows and the SNP with the highest LOG10P value is then annotated in the plot with the name of the closest gene

```{python}
#| tags: [parameters]

regenie_merged = "test/p21001_i0.regenie.gz"
annotated_tophits_filename = "test/p21001_i0.regenie.filtered.annotated.fixed.txt.gz"
annotated_toploci_filename = "test/p21001_i0.toploci.annot.tsv"
```

```{python}
import gwaslab as gl
import pandas as pd
import os
```

```{python}
#Load regenie results
regenieTable = gl.Sumstats(regenie_merged, fmt="regenie", compression='gzip', build="19", sep="\t")
regenieTable.data['P'] = 10 ** (-regenieTable.data['MLOG10P'])
```

```{python}
#Load top hits
annotated_tophits = pd.read_csv(annotated_tophits_filename, sep="\t")
annotated_tophits = annotated_tophits.rename(columns={'ID': 'SNPID'})

#Group by gene name and select the top hit
top_snp_per_gene = annotated_tophits.groupby('CLOSEST_GENE_NAME').apply(lambda x: x.loc[x['LOG10P'].idxmax()]).loc[:, ['CHROM','GENPOS','SNPID','LOG10P']].reset_index()

#To avoid overlapping SNPs, group by 500kb windows
top_snp_per_gene['group'] = (top_snp_per_gene['GENPOS'] // 500000).astype(int)
top_snp_per_gene = top_snp_per_gene.groupby(['CHROM','group']).apply(lambda x: x.loc[x['LOG10P'].idxmax()])

#Reset index and select only the SNPID column
top_snp_per_gene = top_snp_per_gene.loc[:, ['SNPID','CLOSEST_GENE_NAME']].reset_index(drop=True)
```

```{python}
#Merge top hits with regenie results
regenieTable.data = pd.merge(regenieTable.data, top_snp_per_gene, on='SNPID', how='left')
```

```{python}
#Plot Manhattan and QQ
regenieTable.plot_mqq(
  mode="qqm",
  stratified=True, skip=2, 
  build="19",
  anno="CLOSEST_GENE_NAME", anno_set=top_snp_per_gene['SNPID'].tolist(),
  highlight=top_snp_per_gene['SNPID'].tolist(),
  suggestive_sig_line=True, sig_line=True)
```


## Genes on top SNPs

This table summarises the closest genes for top SNPs (SNPs with LOG10P above `r params$annotation_min_log10p`).
It reports the list of genes overlapped by top SNPs and the number of such SNPs in the gene. 
The lowest P-value and the minimum SNP-gene distance across top SNPs is also reported

```{r, echo=FALSE, message=FALSE, warning=FALSE}

annotatedTopHits <- fread(params$annotated_tophits_filename, select = c("CHROM", "GENPOS", "LOG10P", "ID", "CLOSEST_GENE_NAME", "CLOSEST_GENE_CHROMOSOME", "CLOSEST_GENE_START", "CLOSEST_GENE_END", "CLOSEST_GENE_DISTANCE"), header=TRUE, tmpdir="$PWD")

topHitsGroupedByGene <-
  annotatedTopHits %>%
  group_by(CLOSEST_GENE_NAME, CLOSEST_GENE_CHROMOSOME, CLOSEST_GENE_START, CLOSEST_GENE_END) %>%
  summarise(GENE_LOG10P = max(LOG10P), VARIANTS = n(), MIN_DISTANCE=min(CLOSEST_GENE_DISTANCE)) %>%
  arrange(desc(GENE_LOG10P))

colnames(topHitsGroupedByGene) <- c("GENE","CHROMOSOME","START","END","MAX_LOG10P","N_VARIANTS","MIN_DISTANCE")

datatable(topHitsGroupedByGene)

```

## Top Loci

This table lists top associated loci after clumping using plink. 
The minimum log10 p-value for index SNPs is `r params$annotation_min_log10p`

```{r, echo=FALSE, message=FALSE, warning=FALSE}
if (file.exists(params$annotated_toploci_filename)) {
  annotatedTopLoci <- fread(params$annotated_toploci_filename, header=TRUE, tmpdir="$PWD")
  annotatedTopLoci <- annotatedTopLoci[order(annotatedTopLoci$P),]
  
  datatable(annotatedTopLoci)
} else {
  cat("No clumping loci available")
}
```

```{python}
#Check if a file exists
if os.path.exists(annotated_toploci_filename):
  annotatedTopLoci = pd.read_csv(annotated_toploci_filename, sep="\t")
  annotatedTopLoci = annotatedTopLoci.sort_values(by=['P'], ascending=True)[0:10]

  # assuming your DataFrame is called df
  annotatedTopLoci[['CHR', 'START', 'END']] = annotatedTopLoci['POS'].str.extract(r'(chr){0,1}([0-9XY]+):([0-9]+)..([0-9]+)').iloc[:, 1:]

  # For each line generate a regional plot using the plot_mqq function
  for index, row in annotatedTopLoci.iterrows():
    regenieTable.plot_mqq(
      mode="r",
      build="19",
      region_grid=True,
      region_ref = row['SNP'],
      region=(row['CHR'],row['START'],row['END']),
      vcf_path=gl.get_path("1kg_eur_hg19")
      )
```

## Validation and Logs

### Phenotype File Validation

```{r, echo=FALSE}
phenotype_log <- read.table(params$phenotype_log,
                      sep ="\t", header = TRUE, dec =".")
datatable(phenotype_log)
```

### Covariate File Validation

```{r, echo=FALSE, results='asis'}
if(file.exists(params$covariate_log)) {
step1_log <- read.table(params$covariate_log,sep ="\t", header = TRUE, dec =".")
datatable(step1_log)
} else {
    cat("*No covariates available.*")
}
```

### Regenie Step 1 Log

```{r, echo=FALSE, results='asis'}
if(file.exists(params$regenie_step1_log)) {
step1_log <- read.table(params$regenie_step1_log,sep ="\t", header = TRUE, dec =".")
datatable(step1_log)
} else {
    cat("*Regenie step 1 skipped.*")
}
```

### Regenie Step 2 Log

```{r, echo=FALSE}
step2_log <- read.table(params$regenie_step2_log,
                      sep ="\t", header = TRUE, dec =".")
datatable(step2_log)
```


---

<small>
This report has been created with **[nf-fast-regenie `r params$version`](https://gitlab.fht.org/genome-analysis-unit/nf-pipeline-regenie)**, a nextflow pipeline developed by [Edoardo Giacopuzzi](mailto:edoardo.giacopuzzi@fht.org) at the Human Technopole Foundation, Milan, Italy. 
</small>
